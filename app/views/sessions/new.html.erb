

<html>
<head>
	<title><%= full_title(yield(:title)) %></title>
	<%= stylesheet_link_tag 'application', media: 'all',
	'data-turbolinks-track' => true %>
	<%= javascript_include_tag 'application', 'data-turbolinks-track' => true %>
	<%= csrf_meta_tags %>
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" type="text/css" href="assets/css/style.css" />
	<!-- Latest compiled and minified CSS -->
	<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">

	<!-- Optional theme -->
	<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css">

	<!-- Latest compiled and minified JavaScript -->
	<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>

  <link rel="stylesheet" type="text/css"
    href="https://js.api.here.com/v3/3.0/mapsjs-ui.css" />
  <script type="text/javascript" charset="UTF-8"
    src="https://js.api.here.com/v3/3.0/mapsjs-core.js"></script>
  <script type="text/javascript" charset="UTF-8"
    src="https://js.api.here.com/v3/3.0/mapsjs-service.js"></script>
  <script type="text/javascript" charset="UTF-8"
    src="https://js.api.here.com/v3/3.0/mapsjs-ui.js"></script>
  <script type="text/javascript" charset="UTF-8"
    src="https://js.api.here.com/v3/3.0/mapsjs-mapevents.js"></script>
  <script type="text/javascript" charset="UTF-8"
    src="https://js.api.here.com/v3/3.0/mapsjs-places.js"></script>
</head>
<body>
	<div class="container-fluid">
		<div class="navbar navbar-inverse navbar-fixed-top">
			<ul class="nav navbar-nav">
				<li class="active"><a href="#">Home</a></li>
				<li><a href="#">Our Team</a><li>
			</ul>
			
			<ul class="nav navbar-nav navbar-right">
       			<% if logged_in? %>
       		 		<li><a href="#">Your Profile</a></li>
       		 		<li><%= link_to "Log out", logout_path, method: "delete" %></li>
       			<% else %>
       				<li><a href="/login">Log In</a></li>
       		 		<li><a href="/signup">Sign Up</a></li>
       			<% end %>
       		</ul>
		</div>
		 <% if flash[:danger] %>
        <div id="flash_notice"><%= flash.now[:danger]='Wrong password: Please try again.' %></div>
    	<% end %>
		<div class="header">
				Welcome to sTrails
		</div>
			
		<div id="content">
				City Tours. Made Smarter.
		</div>
			
		
		<% if not logged_in? %>	
			<div id="signup-form">
				<%= form_for(:session, url: login_path) do |f| %>
		
					<div class="listelement">
	     				<%= f.label :email %>
	     				<%= f.email_field :email, :placeholder => "example@example.com" %>
	  				</div>
	  			
	  				<div class="listelement">
	      				<%= f.label :password %>
	      				<%= f.password_field :password, :placeholder => "Password" %>
	     			</div>
	      			
	      			<%= f.submit "Log in", class: "btn btn-default" %>
	      			<% end %>

	      	</div>
	      		<div id="signupbutton">
	      				Want to get your sTrails? Sign up!
	      				
	      		</div>
	      		
	      		<div class="buttonspan text-center">
	      		<a href="/signup" class="btn btn-info" role="button">Sign up!</a>
	    		</div>
	    
	    <% else %>
	    		
	    		<div class="header">
	    		Where would you like to visit today?
	    		</div>
	    		
	    		<form>
  	<div class="form-group">
    <label for="examplecity1">City</label>
    <input type="city" class="form-control" id="CityName" placeholder="City Name">
	</div>
	<div class="stuff">
		<div class="df">
	        <label>State: <span>*</span></label><br/>
	        <select name="state" class="form-control" id="statename">
	            <option value="AL">AL</option>
	            <option value="AK">AK</option>
	            <option value="AZ">AZ</option>
	            <option value="AR">AR</option>
	            <option value="CA">CA</option>
	            <option value="CO">CO</option>
	            <option value="CT">CT</option>
	            <option value="DE">DE</option>
	            <option value="DC">DC</option>
	            <option value="FL">FL</option>
	            <option value="GA">GA</option>
	            <option value="HI">HI</option>
	            <option value="ID">ID</option>
	            <option value="IL">IL</option>
	            <option value="IN">IN</option>
	            <option value="IA">IA</option>
	            <option value="KS">KS</option>
	            <option value="KY">KY</option>
	            <option value="LA">LA</option>
	            <option value="ME">ME</option>
	            <option value="MD">MD</option>
	            <option value="MA">MA</option>
	            <option value="MI">MI</option>
	            <option value="MN">MN</option>
	            <option value="MS">MS</option>
	            <option value="MO">MO</option>
	            <option value="MT">MT</option>
	            <option value="NE">NE</option>
	            <option value="NV">NV</option>
	            <option value="NH">NH</option>
	            <option value="NJ">NJ</option>
	            <option value="NM">NM</option>
	            <option value="NY">NY</option>
	            <option value="NC">NC</option>
	            <option value="ND">ND</option>
	            <option value="OH">OH</option>
	            <option value="OK">OK</option>
	            <option value="OR">OR</option>
	            <option value="PA">PA</option>
	            <option value="RI">RI</option>
	            <option value="SC">SC</option>
	            <option value="SD">SD</option>
	            <option value="TN">TN</option>
	            <option value="TX">TX</option>
	            <option value="UT">UT</option>
	            <option value="VT">VT</option>
	            <option value="VA">VA</option>
	            <option value="WA">WA</option>
	            <option value="WV">WV</option>
	            <option value="WI">WI</option>
	            <option value="WY">WY</option>
	        </select>
	    </div>
	</div>
	<div class="text-center">
	<button type="button" class="btn btn-default" id="mybutton" onclick="findLocation()">Submit</button>
	<script>
	function findLocation(){ 
	
	var city=document.getElementById('CityName').value;
	var allstates=document.getElementById('statename');
	var usersstate=allstates.options[allstates.selectedIndex].text;

	city=city.replace(/ /g,"+");
	
	httpGetAsync("http://geocoder.cit.api.here.com/6.2/geocode.xml?app_id=zqFwHGs3fAaLpN3H0D4e&app_code=TiCEcnSvzxEy6xOmaIwlOw&gen=9&searchtext="+String(city)+"+"+String(usersstate),getlatlon);

	
	}
	
	function httpGetAsync(theUrl, callback)
{
    var xmlHttp = new XMLHttpRequest();
    xmlHttp.onreadystatechange = function() { 
        if (xmlHttp.readyState == 4 && xmlHttp.status == 200){
            alert("we done boys")
            callback(xmlHttp);
        }
    }
    xmlHttp.open("GET", theUrl, true); // true for asynchronous 
    xmlHttp.send(null);
    
}
	function getlatlon(xml)
	{
		xmlDoc=xml.responseXML;
		
		var lats = xmlDoc.getElementsByTagName("Latitude");
		var lons=xmlDoc.getElementsByTagName("Longitude");
		
		lat=lats[1].nodeName;
		lon=lons[1].nodeName;
		bop=lats[1].childNodes;
		lat=lats[1].childNodes[0].nodeValue;
		lon=lons[1].childNodes[0].nodeValue;
		
		return [lat,lon];
	}
	
	</script>

	</div>
	
</form>
<% end %>
	    
			</div>
		
		
	
	</div>
	
	
	<div id="map" style="position:absolute; width:49%; height:100%; background:grey" ></div>
	<div id="panel" style="position:absolute; width:49%; left:51%; height:100%; background:inherit" ></div>

	<script  type="text/javascript" charset="UTF-8" >
    function getFormData(){ 
	var city=document.getElementById('examplecity1').value;
	var state=document.getElementById('state').value;
/* some other fields */
/* now call ur function by passing the above values */
	alert("asdfasdfa");
}
/**
 * This example uses the explore entrypoint to find sights and museums, around the
 * Brandenburg Gate (52.5159°N, 13.3777°E) in Berlin.
 *
 * A full list of available request parameters can be found in the Places API
 * documentation.
 * see:  http://developer.here.com/rest-apis/documentation/places/topics_api/resource-explore.html
 *
 * Note that the places module https://js.api.here.com/v3/3.0/mapsjs-places.js
 * must be loaded to use the Places API endpoints
 *
 * @param   {H.service.Platform} platform    A stub class to access HERE services
 */
function explorePlaces(platform) {
  var explore = new H.places.Explore(platform.getPlacesService());
  var params = {
    'cat': 'sights-museums',
    'in': '52.5159,13.3777;r=500'  // Berlin
  };
  explore.request(params, {}, onResult, onError);
}


/**
 * This function will be called once the Places REST API provides a response
 * @param  {Object} result          A JSONP object representing the  location(s) found.
 *
 * see: http://developer.here.com/rest-apis/documentation/places/topics_api/media-type-search.html
 *
 */
function onResult(result) {
  var places = result.results.items;
  /*
   * The styling of the places response on the map is entirely under the developers control.
   * A representative styling can be found the full JS + HTML code of this example
   * in the functions below:
   */
  addPlacesToMap(places);
  addPlacesToPanel(places);
}


/**
 * This function will be called if a communication error occurs during the JSON-P request
 * @param  {Object} error  The error message received.
 *
 * see: see: http://developer.here.com/rest-apis/documentation/places/topics_api/object-error.html
 */
function onError(error) {
  error = data;
}


/**
 * Boilerplate map initialization code starts below:
 */


// Hold a reference to any infobubble opened
var bubble;

/**
 * Opens/Closes a infobubble
 * @param  {H.geo.Point} position     The location on the map.
 * @param  {String} text              The contents of the infobubble.
 */
function openBubble(position, text){
  if(!bubble){
    bubble =  new H.ui.InfoBubble(
      position,
      // The FO property holds the province name.
      {content: text});
    ui.addBubble(bubble);
  } else {
    bubble.setPosition(position);
    bubble.setContent(text);
    bubble.open();
  }
}



/**
 * Creates a series of clickable markers for each place found  and adds it to the map.
 * @param {Object[]} places An array of places as received from the H.service.getPlacesService
 */
function addPlacesToMap(places) {
  var group = new  H.map.Group();
  // add 'tap' event listener, that opens info bubble, to the group
  group.addEventListener('tap', function (evt) {
    map.setCenter(evt.target.getPosition());
    openBubble(
      evt.target.getPosition(), evt.target.content);
  }, false);

  group.addObjects(places.map(function (place) {
    var marker = new H.map.Marker({lat: place.position[0], lng: place.position[1]})
    marker.content = '<div style="font-size: 10px" ><h3>' + place.title +
      '</h3><h4>' + place.category.title + '</h4>' + place.vicinity + '</div>';
    return marker;
  }));

  map.addObject(group);

  // get geo bounding box for the group and set it to the map
  map.setViewBounds(group.getBounds());
}

/**
 * Creates a series of list items for each location found, and adds it to the panel.
 * @param {Object[]} locations An array of locations as received from the
 *                             H.service.GeocodingService
 */
function addPlacesToPanel(places){

  var nodeOL = document.createElement('ul'),
    i;

  nodeOL.style.fontSize = 'small';
  nodeOL.style.marginLeft ='5%';
  nodeOL.style.marginRight ='5%';


   for (i = 0;  i < places.length; i += 1) {
     var li = document.createElement('li'),
        divLabel = document.createElement('div'),
        content =  '<strong style="font-size: large;">' + places[i].title  + '</strong>';
        content += ' <span style="font-size:smaller">(' +  places[i].category.title + ')</span><br>';
        content +=  places[i].vicinity + '<br>';
        content += '<strong>distance:</strong>' +  places[i].distance + 'm<br>';

      divLabel.innerHTML = content;
      li.appendChild(divLabel);
      nodeOL.appendChild(li);
  }

  placesContainer.appendChild(nodeOL);
}


// 1. initialize platform
var platform = new H.service.Platform({
  app_id: 'zqFwHGs3fAaLpN3H0D4e',
  app_code: 'TiCEcnSvzxEy6xOmaIwlOw',
  useHTTPS: true,
  useCIT: true
});

var defaultLayers = platform.createDefaultLayers();

var map = new H.Map(document.getElementById('map'),
  defaultLayers.normal.map, {
    center: {lat: -37.7942, lng: -122.4070},
    zoom: 15
  });

var placesContainer = document.getElementById('panel');

// add map behavior

var behavior = new H.mapevents.Behavior(new H.mapevents.MapEvents(map));

// Create the default UI components

var ui = H.ui.UI.createDefault(map, defaultLayers);

explorePlaces(platform);



	</script>

</body>
</html>